#+TITLE: Fernando Pe単a's Emacs configuration
#+OPTIONS: toc:4 H:4
#+STARTUP: content indent
#+PROPERTY: header-args:emacs-lisp :tangle "~/.emacs.d/init.el"

* About this file
This is my Emacs config file. It's written in the literate programming style in
Org Mode. It's very convenient for organizing the code in sections and
commenting each block.

This file is inspired on Sacha Chua's Emacs configuration: [[http://pages.sachachua.com/.emacs.d/Sacha.html]]

To tangle the code blocks into a new ~init.el~ file after making some changes,
use =C-c C-v t= (~org-babel-tangle~).

* Starting up
** Custom startup directory
This file is symlinked, so tell emacs not to start in the actual directory of
the file.

#+BEGIN_SRC emacs-lisp
  (setq default-directory "~/")
#+END_SRC

** Initialize package and add package archives
It also includes =use-package= initialization

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/"))

  ;; Initialize the packages
  (unless (bound-and-true-p package--initialized)
    (setq package-enable-at-startup nil)
    (package-initialize))

  ;; Make sure `use-package'is available
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; Configure `use-package'
  (eval-and-compile
    (setq use-package-verbose t)
    (setq use-package-compute-statistics t)
    ;; Don't append `hook' suffix when using :hook
    (setq use-package-hook-name-suffix nil))

  (eval-when-compile
    (require'use-package))

  (setq use-package-always-ensure t)
#+END_SRC

** Customize
Configure the file to to store customize settings. I prefer using =setq= instead
of customize because I find it easier to organize, but when I use it, it stores
the settings in the next file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/.emacs-custom.el")
  (load custom-file)
#+END_SRC

** Disable splash screen

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

** Menu bar, toolbar and scroll bar
Disable/enable menu bar (on Linux) and toolbar.
Disable scroll bar.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)
  (add-hook 'after-make-frame-functions '(lambda (frame)
                                           (modify-frame-parameters frame
                                                                    '((vertical-scroll-bars . nil)
                                                                      (horizontal-scroll-bars . nil)))))
#+END_SRC

** Emacs cursor settings

#+BEGIN_SRC emacs-lisp
  ;; (setq-default cursor-type 'bar)
  (blink-cursor-mode 0)
#+END_SRC

** Set font

#+BEGIN_SRC emacs-lisp
  ;; (set-default-font "Monaco-12")
  ;; set font for all windows. keep window size fixed
  (set-frame-font "Menlo-12" nil t)
  (set-face-attribute 'variable-pitch nil :width 'normal :family "Helvetica" :height 130)
#+END_SRC

** PATH variable
Make emacs PATH variable equal to user's shell PATH

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

** Load secrets
I keep sensitive information in a separate file.

#+BEGIN_SRC emacs-lisp
  (load "~/Library/Mobile Documents/com~apple~CloudDocs/emacs/.emacs.secrets" t)
#+END_SRC

** Global key changes
Change al key to meta for Emacs Mac.

#+BEGIN_SRC emacs-lisp
  (setq mac-option-modifier 'meta)
#+END_SRC

Remap =RET= key to ~newline-and-indent~ to indent the line when pressing =RET=
and start next line with correct indentation.
The ~newline~ function is rebounded =<C-return>=.

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
  (define-key global-map (kbd "<C-return>") 'newline)
#+END_SRC

Translate =単= key.

#+begin_src emacs-lisp
  (define-key key-translation-map (kbd "M-単") (kbd "M-;"))
  (define-key key-translation-map (kbd "C-単") (kbd "C-;"))
  (global-set-key (kbd "C-x C-.") 'flyspell-auto-correct-previous-word)
#+end_src

Better default keybindings.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "M-z") 'zap-up-to-char)

  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-s") 'isearch-backward)

  (global-set-key (kbd "M-%") 'query-replace-regexp)
  (global-set-key (kbd "C-M-%") 'query-replace)
#+end_src

Press middle button (=<mouse-2>=) with two button mouse

#+BEGIN_SRC emacs-lisp
  (define-key key-translation-map (kbd "<S-mouse-1>") (kbd "<mouse-2>"))
#+END_SRC

** Disable bell

#+begin_src emacs-lisp
  (setq visible-bell nil
        ring-bell-function #'ignore)
#+end_src

* Evil Mode
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

I'm using Evil Mode because like Vim keybindings. However, there are some
inconsistencies across differente modes, so maybe I'll start using Emacs default
ones.

** Configure Evil Mode

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-C-u-delete t)
    (setq evil-want-C-u-scroll t)
    (setq evil-shift-width 4)
    (setq evil-echo-state nil)
    ;; evil-collection assumes evil-want-keybinding is set to nil and
    ;; evil-want-integration is set to t before loading evil
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+END_SRC

** Configure Evil Commentary
Configure =evil-commentary= package for commenting more easily.  The command
=gc= acceps a motion object and it comments it. To comment a line, use =gcc=.

#+BEGIN_SRC emacs-lisp
(use-package evil-commentary
  :ensure t
  :config
  (evil-commentary-mode))
#+END_SRC

** Configure Evil Collection
It is a collection of Evil bindings for the parts that Evil don't cover by
default, such as =help-mode=, =M-x calendar=,...

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    ;; Load all bindings
    (evil-collection-init))
#+END_SRC

** Configure Evil Surround
Emulation of =surround.vim= by Tim Pope.

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC

** Configure Evil Org Mode
Supplemental keybindings =evil-mode= keybindings to =org-mode=

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

* General configuration
** Reload Emacs Configuration
Reload my Emacs configuration file

#+BEGIN_SRC emacs-lisp
  (defun my/reload-emacs-configuration ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+END_SRC

** Color Theme
*** Gruvbox

#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :ensure t)
#+end_src

*** Monokai

#+begin_src emacs-lisp
  (use-package monokai-theme
    :ensure t
    :config

    ;; (setq monokai-background "#282923"
    ;;       monokai-blue "#67d8ef"
    ;;       monokai-cyan "#a1efe4"
    ;;       monokai-gray "#75715e"
    ;;       monokai-green "#a6e22c"
    ;;       monokai-magenta "#fd5ff0"
    ;;       monokai-orange "#fd9621"
    ;;       monokai-red "#f92472"
    ;;       monokai-violet "#ac80ff"
    ;;       monokai-yellow "#e7db74")

    ;; (setq monokai-comments "#74705d"
    ;;       monokai-line-number "90918b"
    ;;       monokai-highlight "#383830"
    ;;       monokai-highlight-alt "#3e3d32"
    ;;       monokai-highlight-line "#71716b")

    ;;  (setq monokai-distinct-fringe-background nil
    ;;       monokai-doc-face-as-comment t)

    (setq monokai-height-minus-1 1
          monokai-height-plus-1 1
          monokai-height-plus-2 1
          monokai-height-plus-3 1
          monokai-height-plus-4 1))
#+end_src

*** Monokai Pro

#+begin_src emacs-lisp
  (use-package monokai-pro-theme
    :ensure t)
#+end_src

*** Monokai Alt

#+begin_src emacs-lisp
  (use-package monokai-alt-theme
    :ensure t)
#+end_src

*** Darkokai

#+begin_src emacs-lisp
  (use-package darkokai-theme
    :ensure t)
#+end_src

*** Doom themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doomt-themes-enable-italic t)

    (doom-themes-org-config))
#+end_src

*** Dracula

#+begin_src emacs-lisp
  (use-package dracula-theme
    :ensure t
    :config
    (setq dracula-enlarge-headings nil)
    (setq dracula-alternate-mode-line-and-minibuffer t))
#+end_src

*** Wombat

#+begin_src emacs-lisp :tangle no
  (custom-set-faces
   '(outline-1 ((t (:inherit font-lock-keyword-face))))
   '(outline-2 ((t (:inherit font-lock-string-face))))
   '(outline-3 ((t (:inherit font-lock-variable-name-face))))
   '(outline-4 ((t (:inherit font-lock-warning-face))))
   ;; '(outline-5 ((t (:inherit font-lock-type-face))))
   ;; '(outline-6 ((t (:inherit shadow))))
   ;; '(outline-7 ((t (:inherit font-lock-string-face))))
   ;; '(outline-8 ((t (:inherit font-lock-comment-face))))
   )
#+end_src

*** Load theme

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (load-theme 'gruvbox-dark-hard))
#+end_src

** Modifier keys configuration
I no longer use these, I'm using Karabiner Elements for modifying modifier keys
mappings.

#+BEGIN_SRC emacs-lisp :tangle no
  (setq mac-command-modifier 'control)
#+END_SRC

** Parens and pair characters
Highlight matching parens.

#+BEGIN_SRC  emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-delay 0)
#+END_SRC

Activate =electric-pair-mode= for inserting automatically matching pair
character.

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC

Use =rainbow-delimiters= package. Highlights parens, brackets and braces
acording to their depth.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

Use =paren-face= to dim parentheses

#+begin_src emacs-lisp
  (use-package paren-face
    :ensure t
    :config
    (global-paren-face-mode))
#+end_src

** Line numbers
*** Enable line and column numbers in the modeline

#+begin_src emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
#+end_src

*** Display line numbers mode
Enable =display-line-numbers-mode= on programming modes. To avoid shiftings
lateral effects when scrolling throught the buffer. I set
=display-line-numbers-width= to one more than the necessary when the buffer has
80-99 lines.

#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-grow-only t)
  ;; (setq display-line-numbers-width-start t)
  ;; Make the left fringe smaller
  ;; (fringe-mode '(1 . 4))

  (defun calculate-width (n)
    "Calculate width in O(1) time"
    (let ((width
      (if (< n 1)
          1
        (+ 1 (floor (/ (log n) (log 10)))))))

      (if (and (>= n 80) (<= n 99))
          (1+ width)
        width)))

  (defun my-display-line-numbers-mode-hook ()
    (setq-local display-line-numbers-width (calculate-width (count-lines (point-max) (point-min)))))
  (add-hook 'display-line-numbers-mode-hook #'my-display-line-numbers-mode-hook)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+END_SRC

** Whitespace
*** Delete trailing whitespace on save

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

*** Show whitespace at the end of the line.

#+BEGIN_SRC emacs-lisp :tangle no
  (setq-default show-trailing-whitespace t)
  (add-hook 'shell-mode-hook (lambda ()
                    (setq show-trailing-whitespace nil)))
#+END_SRC

*** Indicate empty lines at the end of the buffer.

#+BEGIN_SRC emacs-lisp
  (setq-default indicate-empty-lines t)
#+END_SRC

** Backups
Save all backup files in the same directory, so they don't appear everywhere :)

#+BEGIN_SRC emacs-lisp
  (unless backup-directory-alist
    (setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups")))))
#+END_SRC

Backups settings.

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms `((".*" ,(concat user-emacs-directory "auto-save-list") t)))
#+END_SRC

** Ido Mode and Smex
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

*** Activate Ido Mode.

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

Set Find File At Point, so Ido suggests the file which name is under the cursor

#+BEGIN_SRC emacs-lisp
  (setq ido-use-filename-at-point 'guess)
#+END_SRC

Give permission to create new buffers without asking

#+BEGIN_SRC emacs-lisp
  (setq ido-create-new-buffer 'always)
#+END_SRC

set order of suggestions in the minibuffer

#+BEGIN_SRC emacs-lisp
  (setq ido-file-extensions-order '( ".org" ".txt" ".py" ".emacs" ".xml" ".el"
                                     ".ini" ".cfg" ".cnf"))
#+END_SRC

*** Activate Smex. It's like Ido mode for M-x

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :config
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    ;; This is your old M-x.
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command))
#+END_SRC

** Ivy/Counsel/Swiper
:PROPERTIES:
:END:

Configure ivy, counsel and swiper

#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config
    (setq counsel-find-file-at-point t)
    (counsel-mode))

  (use-package ivy
    :defer 0.1
    :diminish
    :bind
    (("C-c C-r" . ivy-resume))
    :custom
    ;; (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    (ivy-count-format "(%d/%d) ")
    (ivy-display-style 'fancy)
    (ivy-use-selectable-prompt t)
    (ivy-do-completion-in-region nil)
    :config
    (ivy-mode))

  (use-package swiper
    :after ivy
    :bind
    (("C-S-s" . swiper)
     ("C-S-r" . swiper-backward)))
#+end_src

*** Ivy extensions
**** AMX (similar to smex)
M-x history and recommendations

#+begin_src emacs-lisp
    (use-package amx
      :ensure t
      :after ivy
      :custom
      (amx-backend 'auto)
      (amx-save-save-file "~/.emacs.d/amx-items")
      (amx-history-length 50)
      :config
      (amx-mode 1))
#+end_src

**** Ivy rich
This package adds information on the empty space that Ivy leaves.

#+begin_src emacs-lisp
  (use-package ivy-rich
    :ensure t
    :config
    (setcdr (assq t ivy-format-functions-alist)
            #'ivy-format-function-line)
    (ivy-rich-mode 1))
#+end_src

** Helm
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :bind
    (("M-x" . helm-M-x)
     ("C-x C-f" . helm-find-files))
    :config
    (helm-mode 1))
#+end_src

** Windows
*** Faster switching between windows in the same frame using S + arrow keys

#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
#+END_SRC

*** Go to previous other window
This function is complementary to =other-window=.

#+BEGIN_SRC emacs-lisp
  (defun other-window-backward ()
    "Goto previous window"
    (interactive)
    (other-window -1))
  (global-set-key (kbd "\C-x p") 'other-window-backward)
#+END_SRC

*** Close and kill next pane
This function is complementary to =kill-buffer-and-window=.

#+begin_src emacs-lisp
  (defun other-kill-buffer-and-window ()
    "If there are multiple windows, close the other window and kill the buffer in it also."
    (interactive)
    (other-window 1)
    (kill-buffer-and-window))
  (global-set-key (kbd "\C-x 4 o") 'other-kill-buffer-and-window)
#+end_src

** Disabled commands
Enable Emacs disabled commands.

#+BEGIN_SRC emacs-lisp
  (setq disabled-command-function nil)
#+END_SRC

** Undo Tree
Undo Tree let's you use =C-x u= (=undo-tree-visualize=) to see the undo tree for
the current buffer and undo to a certain point.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t))
#+END_SRC

** Change "yes or no" to "y or n"
I'm too lazy to write =yes= or =no=.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** End sentences with single space

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Move to trash when deleting

#+begin_src emacs-lisp
  (when (string-equal system-type "darwin")
    (setq delete-by-moving-to-trash t)
    (setq trash-directory "~/.Trash"))
#+end_src

** isearch
Avoid flickering setting the highlight delay to 0 and allow scrolling when
searching.

#+begin_src emacs-lisp
  (setq-default isearch-allow-scroll t
                ;; lazy-highlight-cleanup nil
                lazy-highlight-initial-delay 0)
#+end_src

** Scroll configuration
The variable =scroll-margin= tells how many lines are kept between the cursor
and the top/bottom of the window.

Setting =scroll-conservatively= to a large number, automatic scrolling never
centers the point.

#+begin_src emacs-lisp
  (setq scroll-conservatively 101
        scroll-margin 1
        scroll-step 1)
#+end_src

* Global editing configuration
** Indentation
Set indentation width to 4.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default c-basic-offset 4)
#+END_SRC

Indent using spaces

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

TAB tries to indent the current line, and if the line was already indented, then
tries to complete the thing at point

#+begin_src emacs-lisp
  (setq tab-always-indent 'complete)
#+end_src

** Replace when writing over selection

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

** Remember cursor position
in buffer when saving file

#+BEGIN_SRC emacs-lisp
  (save-place-mode 1)
#+END_SRC

** Wrap text to words

#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
#+END_SRC

** Apropos search more extensively

#+begin_src emacs-lisp
  (setq apropos-do-all t)
#+end_src

** Highlight current line

#+BEGIN_SRC emacs-lisp :tangle no
  (global-hl-line-mode t)
#+END_SRC

** Spell checking
Set Hunspell as spell checking engine and configure it to use English and
Spanish dictionaries

*** How to install dictionaries in Hunspell
First, install Hunspell from the command line:

#+BEGIN_SRC bash
  brew install hunspell
#+END_SRC

Then, download the dictionaries from here:
https://github.com/LibreOffice/dictionaries
or from the OpenOffice Extensions page:
https://extensions.openoffice.org

Move the dictionary =.aff= and =.dic= files to the =~/Library/Spelling/=
directory to install them. =oxt= files are compressed with =zip=, so they can be
decompressed easily to get the files.

You can see al the available dictionaries with:

#+BEGIN_SRC bash
  hunspell -D
#+END_SRC

An test if Hunspell can open them with:

#+BEGIN_SRC bash
  hunspell -d <dict1>,<dict2>,...
#+END_SRC

*** First try
[[https://emacs.stackexchange.com/questions/21378/spell-check-with-multiple-dictionaries]]

#+BEGIN_SRC emacs-lisp :tangle no
  (with-eval-after-load "ispell"
    (setq ispell-program-name "hunspell")
    (setq ispell-dictionary "es_ES,en_US")
    ispell-set-spellchecker-params has to be called
    before ispell-hunspell-add-multi-dic will work
    (ispell-set-spellchecker-parames)
    (ispell-hunspell-add-multi-dic "es_ANY"))
#+END_SRC

*** Second try
https://emacs.stackexchange.com/questions/48755/flyspell-does-not-start-form-the-first-try

#+BEGIN_SRC emacs-lisp
  (setq ispell-program-name "hunspell")
  ;; you could set `ispell-dictionary` instead but `ispell-local-dictionary' has higher priority
  (setq ispell-dictionary "en_US,es_ES")
  ;; (setq ispell-local-dictionary "en_US,es_ES")
  (setq ispell-hunspell-dictionary-alist '(("en_US,es_ES" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US,es_ES") nil utf-8)))
#+END_SRC

*** Enable flyspell in text-mode
But disable it in change-log-mode and log-edit-mode. They are text-mode
children.

#+BEGIN_SRC emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))
#+END_SRC

*** Enable flyspell for comments in source code

#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'prog-mode-hook
            (lambda ()
              (flyspell-prog-mode)))
#+END_SRC

** Set =fill-column= to 80 characters

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
#+END_SRC

** Expand region

#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+end_src

* Coding
** Eglot
Eglot is an LSP client.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package eglot
    :ensure t)
#+END_SRC

** Completion
Configure completion while programming. [[http://cachestocaches.com/2015/8/c-completion-emacs/]]

*** Irony mode
Configure Irony Mode.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package irony
    :ensure t
    :defer t
    :init
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    :config
    ;; replace the  `completion-at-point' and `complete-symbol' bindings in
    ;; irony-mode's buffers by irony-mode's function
    (defun my-irony-mode-hook ()
      (define-key irony-mode-map [remap completion-at-point]
        'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
        'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cbd-autosetup-compile-options))
#+END_SRC

*** Company mode
Configure Company Mode.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package company
    :ensure t
    :defer t
    :init
      (add-hook 'after-init-hook 'global-company-mode)
    :config
      (setq company-dabbrev-downcase 0)
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 1)
    :custom
    ;; Activar al escribir cualquier cosa
    (company-require-match nil "se pueden poner anotaciones")
    (company-tooltip-align-annotation t)
    (company-frontends '(company-pseudo-tooltip-fronend
                         company-echo-metadata-frontend))
    ;; :hook ((prog-mode-hook . company-mode))
    :bind (:map company-active-map
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous)))
#+END_SRC

Configure Company Box Mode.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package company-box
    :hook (company-mode-hook . company-box-mode))
#+END_SRC

Configure Company Postframe

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package company-posframe
    :ensure t
    :config
      (company-posframe-mode 1))
      (require 'desktop)
      (push '(company-posframe-mode . nil)
            desktop-minor-mode-table)
#+END_SRC

** Lisp
*** Slime
Load SLIME package

#+begin_src emacs-lisp
  (use-package slime
    :ensure t
    :init
    ;; (load (expand-file-name "~/quicklisp/slime-helper.el"))
    :config
    ;; Contributors
    (setq slime-contribs '(slime-fancy slime-repl slime-scratch slime-trace-dialog))
    ;; (setq slime-contribs '())
    ;; Select Lisp implementation
    (setq inferior-lisp-program "/usr/local/bin/sbcl")
    (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit))
#+end_src

*** Paredit

#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :init
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'slime-repl-mode-hook #'enable-paredit-mode))
#+end_src

Stop SLIME's REPL from grabbing DEL, which is annoying when backspacing over a
'('

#+begin_src emacs-lisp
  (defun override-slime-repl-bindings-with-paredit ()
    (define-key slime-repl-mode-map
      (read-kbd-macro paredit-backward-delete-key) nil))
#+end_src

*** Highlight
Highligt defined symbols

#+begin_src emacs-lisp :tangle no
  (use-package highlight-quoted
    :ensure t
    :hook ((emacs-lisp-mode-hook lisp-mode-hook) . highlight-quoted-mode))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24422 40054 794838 0) :init (24422 40054 794823 0) :init-secs (0 0 44 0) :use-package-secs (0 1 408994 0)))

Highlight quoted symbols

#+begin_src emacs-lisp :tangle no
    (use-package highlight-defined
      :ensure t
      :hook ((emacs-lisp-mode-hook lisp-mode-hook) . highlight-defined-mode))
#+end_src

*** Move to beginning/end of expression

#+begin_src emacs-lisp
  (defun beginning-expression ()
    "Move point to the beginning of the expression at point."
    (interactive)
    (backward-up-list 1 t)
    (forward-char))
  (global-set-key (kbd "C-<") 'beginning-expression)

  (defun end-expression ()
    "Move point to the end of the expression at point."
    (interactive)
    (backward-up-list 1 t)
    (forward-sexp)
    (backward-char))
  (global-set-key (kbd "C->") 'end-expression)
#+end_src

** LSP Mode
https://vxlabs.com/2018/06/08/python-language-server-with-emacs-and-lsp-mode/

#+begin_src emacs-lisp :tangle no
  (use-package lsp-mode
    :ensure t
    :config

    ;; make sure we have lsp-imenu everywhere we have LSP
    (require 'lsp-imenu)
    (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
    ;; get lsp-python-enable defined
    ;; NB: use either projectile-project-root or ffip-get-project-root-directory
    ;;     or any other function that can be used to find the root directory of a project
    (lsp-define-stdio-client lsp-python "python"
                             #'projectile-project-root
                             '("pyls"))

    ;; make sure this is activated when python-mode is activated
    ;; lsp-python-enable is created by macro above
    (add-hook 'python-mode-hook
              (lambda ()
                (lsp-python-enable)))

    ;; lsp extras
    (use-package lsp-ui
      :ensure t
      :config
      (setq lsp-ui-sideline-ignore-duplicate t)
      (add-hook 'lsp-mode-hook 'lsp-ui-mode))

    (use-package company-lsp
      :config
      (push 'company-lsp company-backends))

    ;; NB: only required if you prefer flake8 instead of the default
    ;; send pyls config via lsp-after-initialize-hook -- harmless for
    ;; other servers due to pyls key, but would prefer only sending this
    ;; when pyls gets initialised (:initialize function in
    ;; lsp-define-stdio-client is invoked too early (before server
    ;; start)) -- cpbotha
    (defun lsp-set-cfg ()
      (let ((lsp-cfg `(:pyls (:configurationSources ("flake8")))))
        ;; TODO: check lsp--cur-workspace here to decide per server / project
        (lsp--set-configuration lsp-cfg)))

    (add-hook 'lsp-after-initialize-hook 'lsp-set-cfg))
#+end_src

** LSP Mode 2
#+begin_src emacs-lisp
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-l")

  (use-package lsp-mode
      :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
              (python-mode-hook . lsp)
              ;; if you want which-key integration
              (lsp-mode-hook . lsp-enable-which-key-integration))
      :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  ;; if you are helm user
  ;; (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  ;; if you are ivy user
  ;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  ;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  (use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  ;; optional if you want which-key integration
  (use-package which-key
      :config
      (which-key-mode))

  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0)
#+end_src

* Org Mode
Configuration for Org Mode

#+BEGIN_SRC emacs-lisp
  (require 'org)
#+END_SRC

** Load Org Templates
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
#+END_SRC

** Mappings for Org Mode
Define mappings as suggested in: [[https://orgmode.org/guide/Introduction.html#Introduction]]

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

** Org files

#+begin_src emacs-lisp
  (setq org-agenda-files
        '("~/Library/Mobile Documents/com~apple~CloudDocs/org"
          "~/Library/Mobile Documents/com~apple~CloudDocs/org/Recuperaci坦n Informaci坦n"))
#+end_src

** Modified variables
**** Indentation
I like storing my Org files flushed to left and using =org-indent=mode= to see
the lines virtually indented.

Disabling =org-adapt-indentation= stops indenting lines to match the headlines.

#+BEGIN_SRC emacs-lisp
  (setq org-adapt-indentation nil)
#+END_SRC

Also, I don't call =org-indent-mode= globally, I prefer puting this line in the
files that I'd like to see indented.

#+BEGIN_SRC org
  #+STARTUP: indent
#+END_SRC

**** Tab key

#+begin_src emacs-lisp
(setq org-cycle-emulate-tab t
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0
      org-src-preserve-indentation t)
#+end_src

**** Use property inheritance

#+begin_src emacs-lisp
(setq org-use-property-inheritance t)
#+end_src

**** Images and fonts

#+begin_src emacs-lisp
;; Enable changing image preview size with: #+attr_org: :width 100px
(setq org-image-actual-width nil)
;; (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
;; (set-face-attribute 'org-block nil :inherit 'fixed-pitch)

;; Load intelligent variabe-pith-mode for org-mode
(use-package org-variable-pitch
  :ensure t
  :config
  (set-face-attribute 'org-variable-pitch-fixed-face nil :width 'normal :family "Menlo" :height 120)
  (add-hook 'org-mode-hook 'org-variable-pitch-minor-mode))
#+end_src

** LaTeX

#+BEGIN_SRC emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.2))
#+END_SRC

** Don't reposition text when expanding

#+begin_src emacs-lisp
  (remove-hook 'org-cycle-hook
               #'org-optimize-window-after-visibility-change)
#+end_src

* LaTeX
** Configure AUCTeX

#+BEGIN_SRC emacs-lisp
    (use-package tex
      :ensure auctex
      :config
      (setq TeX-auto-save t
            TeX-parse-self t
            TeX-save-query nil)
      (setq-default TeX-master "main"))
#+END_SRC

#+begin_src emacs-lisp :tangle no
  (setq-default TeX-parse-self t)
  (setq-default TeX-auto-save t)
  (setq-default TeX-master "main")
#+end_src

Use Skim as PDF viewer

#+begin_src emacs-lisp
  (setq TeX-PDF-mode 1)
  ;; (setq TeX-save-query nil)

  (setq TeX-source-correlate-method 'synctex
        TeX-source-correlate-mode t
        TeX-source-correlate-start-server t)

  (setq TeX-view-program-list
        '(("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

  (setq TeX-view-program-selection '((output-pdf "Skim")))
  ;; (setq-default TeX-command-Show " ")
#+end_src

** Configure Latex Preview Pane

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package latex-preview-pane
    :ensure t
    :config
    (latex-preview-pane-enable))
#+END_SRC

To use it on the fly, use: =M-x latex-preview-pane-mode=.

** RefTeX

#+begin_src emacs-lisp
  (require 'bibtex)
  (bibtex-set-dialect 'biblatex)
#+end_src

#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
#+end_src

** latexmk

#+begin_src emacs-lisp
  (use-package auctex-latexmk
    :ensure t
    :config
    (auctex-latexmk-setup)
    (setq japanese-TeX-error-messages nil))
#+end_src

* Yasnippet

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all)
    (yas-global-mode 1))
#+end_src

* Magit

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    ;; Open magit status
    (global-set-key (kbd "C-x g") 'magit-status)
    ;; Call the command with prefix to open the repository selector
    ;; Open transient of transients from non-Magit buffers
    ;; Same as pressing h from a Magit buffer
    (global-set-key (kbd "C-x M-g") 'magit-dispatch))
#+end_src

* ERC
Better display margin, avoid some notifications and load notifications and spelling modules.

#+begin_src emacs-lisp
  (use-package erc
    :custom
    (erc-fill-function 'erc-fill-static)
    (erc-fill-static-center 15)
    (erc-track-exclude-types '("JOIN" "MODE" "NICK" "PART" "QUIT"
                               "324" "329" "332" "333" "353" "477"))
    :config
    ;; (add-to-list 'erc-modules 'notifications)
    ;; (add-to-list 'erc-modules 'spelling)
    (erc-services-mode 1)
    (erc-update-modules))
#+end_src

The package =erc-hl-nicks= associates a color with every nick and =erc-image=
allows displaying images on the buffer, without having to click a link.

#+begin_src emacs-lisp
  (use-package erc-hl-nicks
    :after erc)

  (use-package erc-image
    :after erc)
#+end_src

* Ediff
** Don't open additional frames for Ediff

#+begin_src emacs-lisp
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

* Dired
** Move files between split panes
If another window contains a dired buffer, dired suggest moving files to that
buffer when using =R=.

#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src

** Human readable file sizes

#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh")
#+end_src

* LilyPond

#+begin_src emacs-lisp
  (setq load-path (append (list (expand-file-name "/Applications/LilyPond.app/Contents/Resources/share/emacs/site-lisp")) load-path))
  (autoload 'LilyPond-mode "lilypond-mode" "LilyPond Editing Mode" t)
  (add-to-list 'auto-mode-alist '("\\.ly$" . LilyPond-mode))
#+end_src

* Define word

#+begin_src emacs-lisp
  (use-package define-word
    :ensure t)
#+end_src

* PDF Tools
Fast PDF viewer

#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config
    (pdf-tools-install))
#+end_src

* Ace Window

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (setq aw-background nil)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (global-set-key (kbd "C-x o") 'ace-window))
#+end_src

End of the configuration
