snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[spanish, es-tabla]{babel}
\usepackage[indent]{parskip}

\usepackage{csquotes}

\usepackage{amsmath, amssymb}
\usepackage{url}

\usepackage{xcolor}
\usepackage{float}

\usepackage{biblatex}
\addbibresource{fuentes.bib}

\usepackage{booktabs}

\usepackage{graphicx}
\graphicspath{{imagenes/}{../imagenes/}}

\usepackage[margin=3cm, headheight=13.6pt]{geometry}
\usepackage{fancyhdr}
\fancyhf{}
\lhead{\emph{${1:Cabecera L}}}
\rhead{\emph{${2:Cabecera R}}}
\fancyfoot[C]{\thepage}

\usepackage{subfiles}

\renewcommand{\it}[1]{\textit{#1}}
\renewcommand{\bf}[1]{\textbf{#1}}
\renewcommand{\tt}[1]{\texttt{#1}}

\begin{document}
$0
\end{document}
endsnippet


# En este snippet, b significa que el snippet sólo será expandido al principio
# de una línea. A es autoexpandir, lo que significa que no hay que presionar
# ninguna tecla para que se expanda. Las paradas dentro del snippet se
# representan con $número. La última es $0.
# Si se utiliza desde visual mode, rodea la selección.
snippet beg "begin{} \ end{}" bA
\begin{$1}
	${0:${VISUAL:}}
\end{$1}
endsnippet


# Formateado de texto
snippet em "\emph{}"
\emph{$1}
endsnippet



snippet bf "\textbf{}"
\textbf{$1}
endsnippet



snippet tt "\texttt{}"
\texttt{$1}
endsnippet



snippet it "\textit{}"
\textit{$1}
endsnippet



# Snippets para entrar en el math mode.

# Entrar en el modo inline math.
# Este snippet es 'inteligente', inserta un espacio detrás del signo
# de dólar cuando es necesario.
# La w indica que el snippet sólo se expande si mk está rodeado de espacios.
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

# Entrar en el modo displayed math.
snippet dm "Math" wA
\[
$1
\]
$0
endsnippet


# Snippets para sub y super scripts
# El primero reemplaza LetraDigito por Letra_Digito
snippet '([A-Za-z](\d))' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

# El segundo reemplaza LetraDigitoDigito por Letra_{DigitoDigito}
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet








# Contexto
# Cuando se están escribiendo estos snippets, puede ser que colisionen con texto
# normal. Se puede utilizar el resaltado de sintaxis de Vim para determinar
# cuando expandir o no si se está en modo matemático o en texto.

# Así se puede crear un contexto para decidir cuando se está en modo matemático
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal









# Snippets para superscripts
context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet


# Snippets para fracciones
# Las reglas son las siguientes:
# 1. 		   //	→	\frac{}{}
# 2.           3/	→	\frac{3}{}
# 3.      4\pi^2/	→	\frac{4\pi^2}{}
# 4. (1 + 2 + 3)/	→	\frac{1 + 2 + 3}{}
# 5.   (1+(2+3)/)	→	(1 + \frac{2+3}{})
# 6. (1 + (2+3))/	→	\frac{1 + (2+3)}{}

# 1.
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# 2. y 3.
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

# 4. y 5. Son más complicados porque se salen de la funcionalidad del motor
# de las expresiones regulares
priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# Utiliza la variable ${VISUAL} para representar la selección
context "math()"
snippet v/ "Fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet


# Snippets posfijos
priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet



snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
	\caption{${2:caption}}
	\label{tab:${3:label}}
\end{table}
endsnippet

snippet tableu "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet



snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet



snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet



snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet



snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet
